// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// IUseCase is an autogenerated mock type for the IUseCase type
type IUseCase struct {
	mock.Mock
}

// CheckItems provides a mock function with given fields: game, start, stop
func (_m *IUseCase) CheckItems(game string, start int, stop int) error {
	ret := _m.Called(game, start, stop)

	if len(ret) == 0 {
		panic("no return value specified for CheckItems")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, int, int) error); ok {
		r0 = rf(game, start, stop)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetLinksForTradeItem provides a mock function with given fields: game
func (_m *IUseCase) GetLinksForTradeItem(game string) error {
	ret := _m.Called(game)

	if len(ret) == 0 {
		panic("no return value specified for GetLinksForTradeItem")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(game)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetRareFloats provides a mock function with given fields: limit, offset, game
func (_m *IUseCase) GetRareFloats(limit int, offset int, game string) error {
	ret := _m.Called(limit, offset, game)

	if len(ret) == 0 {
		panic("no return value specified for GetRareFloats")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int, string) error); ok {
		r0 = rf(limit, offset, game)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Ping provides a mock function with given fields: url
func (_m *IUseCase) Ping(url string) (string, error) {
	ret := _m.Called(url)

	if len(ret) == 0 {
		panic("no return value specified for Ping")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(url)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(url)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(url)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SteamAuth provides a mock function with given fields:
func (_m *IUseCase) SteamAuth() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for SteamAuth")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SynchItems provides a mock function with given fields: game
func (_m *IUseCase) SynchItems(game string) error {
	ret := _m.Called(game)

	if len(ret) == 0 {
		panic("no return value specified for SynchItems")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(game)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewIUseCase creates a new instance of IUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *IUseCase {
	mock := &IUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
