// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import (
	entity "bot/internal/domain/entity"

	mock "github.com/stretchr/testify/mock"
)

// IDatabase is an autogenerated mock type for the IDatabase type
type IDatabase struct {
	mock.Mock
}

// CreateForSteamTrade provides a mock function with given fields: hashName, profit
func (_m *IDatabase) CreateForSteamTrade(hashName string, profit float64) error {
	ret := _m.Called(hashName, profit)

	if len(ret) == 0 {
		panic("no return value specified for CreateForSteamTrade")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, float64) error); ok {
		r0 = rf(hashName, profit)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateHashSteamItems provides a mock function with given fields: hashNames, game
func (_m *IDatabase) CreateHashSteamItems(hashNames []string, game string) error {
	ret := _m.Called(hashNames, game)

	if len(ret) == 0 {
		panic("no return value specified for CreateHashSteamItems")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]string, string) error); ok {
		r0 = rf(hashNames, game)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateHelpersForSteamTrade provides a mock function with given fields: links, game
func (_m *IDatabase) CreateHelpersForSteamTrade(links map[string]float64, game string) error {
	ret := _m.Called(links, game)

	if len(ret) == 0 {
		panic("no return value specified for CreateHelpersForSteamTrade")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(map[string]float64, string) error); ok {
		r0 = rf(links, game)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateItemsRareFloat provides a mock function with given fields: items, game
func (_m *IDatabase) CreateItemsRareFloat(items map[string][]entity.FloatItem, game string) error {
	ret := _m.Called(items, game)

	if len(ret) == 0 {
		panic("no return value specified for CreateItemsRareFloat")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(map[string][]entity.FloatItem, string) error); ok {
		r0 = rf(items, game)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateSteamItems provides a mock function with given fields: items, game
func (_m *IDatabase) CreateSteamItems(items []entity.SteamItem, game string) error {
	ret := _m.Called(items, game)

	if len(ret) == 0 {
		panic("no return value specified for CreateSteamItems")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]entity.SteamItem, string) error); ok {
		r0 = rf(items, game)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateSteamSellHistory provides a mock function with given fields: history, game
func (_m *IDatabase) CreateSteamSellHistory(history []entity.SteamSellHistory, game string) error {
	ret := _m.Called(history, game)

	if len(ret) == 0 {
		panic("no return value specified for CreateSteamSellHistory")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]entity.SteamSellHistory, string) error); ok {
		r0 = rf(history, game)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateTables provides a mock function with given fields:
func (_m *IDatabase) CreateTables() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CreateTables")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetHashSteamItems provides a mock function with given fields: game, start, stop
func (_m *IDatabase) GetHashSteamItems(game string, start int64, stop int64) ([]string, error) {
	ret := _m.Called(game, start, stop)

	if len(ret) == 0 {
		panic("no return value specified for GetHashSteamItems")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, int64, int64) ([]string, error)); ok {
		return rf(game, start, stop)
	}
	if rf, ok := ret.Get(0).(func(string, int64, int64) []string); ok {
		r0 = rf(game, start, stop)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(string, int64, int64) error); ok {
		r1 = rf(game, start, stop)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetHelpersForSteamTrade provides a mock function with given fields: start, stop, game
func (_m *IDatabase) GetHelpersForSteamTrade(start int, stop int, game string) ([]string, error) {
	ret := _m.Called(start, stop, game)

	if len(ret) == 0 {
		panic("no return value specified for GetHelpersForSteamTrade")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int, string) ([]string, error)); ok {
		return rf(start, stop, game)
	}
	if rf, ok := ret.Get(0).(func(int, int, string) []string); ok {
		r0 = rf(start, stop, game)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int, string) error); ok {
		r1 = rf(start, stop, game)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLinkSteamItems provides a mock function with given fields: hashNames, game
func (_m *IDatabase) GetLinkSteamItems(hashNames []string, game string) ([]string, error) {
	ret := _m.Called(hashNames, game)

	if len(ret) == 0 {
		panic("no return value specified for GetLinkSteamItems")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func([]string, string) ([]string, error)); ok {
		return rf(hashNames, game)
	}
	if rf, ok := ret.Get(0).(func([]string, string) []string); ok {
		r0 = rf(hashNames, game)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func([]string, string) error); ok {
		r1 = rf(hashNames, game)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSteamSellHistory provides a mock function with given fields: hashName, game, lastDay
func (_m *IDatabase) GetSteamSellHistory(hashName string, game string, lastDay int) ([]entity.SteamSellHistory, error) {
	ret := _m.Called(hashName, game, lastDay)

	if len(ret) == 0 {
		panic("no return value specified for GetSteamSellHistory")
	}

	var r0 []entity.SteamSellHistory
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, int) ([]entity.SteamSellHistory, error)); ok {
		return rf(hashName, game, lastDay)
	}
	if rf, ok := ret.Get(0).(func(string, string, int) []entity.SteamSellHistory); ok {
		r0 = rf(hashName, game, lastDay)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.SteamSellHistory)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, int) error); ok {
		r1 = rf(hashName, game, lastDay)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIDatabase creates a new instance of IDatabase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIDatabase(t interface {
	mock.TestingT
	Cleanup(func())
}) *IDatabase {
	mock := &IDatabase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
