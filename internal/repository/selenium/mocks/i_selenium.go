// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import (
	entity "bot/internal/domain/entity"

	mock "github.com/stretchr/testify/mock"
)

// ISelenium is an autogenerated mock type for the ISelenium type
type ISelenium struct {
	mock.Mock
}

// CheckItems provides a mock function with given fields: info
func (_m *ISelenium) CheckItems(info entity.PaginationInfo[entity.CheckItem]) {
	_m.Called(info)
}

// GetHistoryItem provides a mock function with given fields: link
func (_m *ISelenium) GetHistoryItem(link string) ([]entity.SteamSellHistory, error) {
	ret := _m.Called(link)

	if len(ret) == 0 {
		panic("no return value specified for GetHistoryItem")
	}

	var r0 []entity.SteamSellHistory
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]entity.SteamSellHistory, error)); ok {
		return rf(link)
	}
	if rf, ok := ret.Get(0).(func(string) []entity.SteamSellHistory); ok {
		r0 = rf(link)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.SteamSellHistory)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(link)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetHistoryItems provides a mock function with given fields: info
func (_m *ISelenium) GetHistoryItems(info entity.PaginationInfo[[]entity.SteamSellHistory]) {
	_m.Called(info)
}

// GetLinksForTradeItem provides a mock function with given fields: game
func (_m *ISelenium) GetLinksForTradeItem(game string) (map[string]float64, error) {
	ret := _m.Called(game)

	if len(ret) == 0 {
		panic("no return value specified for GetLinksForTradeItem")
	}

	var r0 map[string]float64
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (map[string]float64, error)); ok {
		return rf(game)
	}
	if rf, ok := ret.Get(0).(func(string) map[string]float64); ok {
		r0 = rf(game)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]float64)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(game)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRareFloats provides a mock function with given fields: limit, offset
func (_m *ISelenium) GetRareFloats(limit int, offset int) (map[string][]entity.FloatItem, error) {
	ret := _m.Called(limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for GetRareFloats")
	}

	var r0 map[string][]entity.FloatItem
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int) (map[string][]entity.FloatItem, error)); ok {
		return rf(limit, offset)
	}
	if rf, ok := ret.Get(0).(func(int, int) map[string][]entity.FloatItem); ok {
		r0 = rf(limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string][]entity.FloatItem)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Ping provides a mock function with given fields: url
func (_m *ISelenium) Ping(url string) (string, error) {
	ret := _m.Called(url)

	if len(ret) == 0 {
		panic("no return value specified for Ping")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(url)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(url)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(url)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SteamLogin provides a mock function with given fields:
func (_m *ISelenium) SteamLogin() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for SteamLogin")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SynchItems provides a mock function with given fields: info
func (_m *ISelenium) SynchItems(info entity.PaginationInfo[[]entity.SteamItem]) {
	_m.Called(info)
}

// NewISelenium creates a new instance of ISelenium. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewISelenium(t interface {
	mock.TestingT
	Cleanup(func())
}) *ISelenium {
	mock := &ISelenium{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
